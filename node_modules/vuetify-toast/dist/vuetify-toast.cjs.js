'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var Vue = _interopDefault(require('vue'));

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
var script = {
  data: function data() {
    return {
      active: false,
      text: '',
      icon: '',
      color: 'info',
      timeout: 3000,
      dismissible: true
    };
  },
  methods: {
    show: function show() {
      var _this = this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (this.active) {
        this.close();
        this.$nextTick(function () {
          return _this.show(options);
        });
        return;
      }

      Object.keys(options).forEach(function (field) {
        return _this[field] = options[field];
      });
      this.active = true;
    },
    close: function close() {
      this.active = false;
    },
    dismiss: function dismiss() {
      if (this.dismissible) {
        this.active = false;
      }
    }
  }
};

function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    if (typeof shadowMode !== 'boolean') {
        createInjectorSSR = createInjector;
        createInjector = shadowMode;
        shadowMode = false;
    }
    // Vue.extend constructor export interop.
    const options = typeof script === 'function' ? script.options : script;
    // render functions
    if (template && template.render) {
        options.render = template.render;
        options.staticRenderFns = template.staticRenderFns;
        options._compiled = true;
        // functional template
        if (isFunctionalTemplate) {
            options.functional = true;
        }
    }
    // scopedId
    if (scopeId) {
        options._scopeId = scopeId;
    }
    let hook;
    if (moduleIdentifier) {
        // server build
        hook = function (context) {
            // 2.3 injection
            context =
                context || // cached call
                    (this.$vnode && this.$vnode.ssrContext) || // stateful
                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional
            // 2.2 with runInNewContext: true
            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
                context = __VUE_SSR_CONTEXT__;
            }
            // inject component styles
            if (style) {
                style.call(this, createInjectorSSR(context));
            }
            // register component module identifier for async chunk inference
            if (context && context._registeredComponents) {
                context._registeredComponents.add(moduleIdentifier);
            }
        };
        // used by ssr in case component is cached and beforeCreate
        // never gets called
        options._ssrRegister = hook;
    }
    else if (style) {
        hook = shadowMode
            ? function (context) {
                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
            }
            : function (context) {
                style.call(this, createInjector(context));
            };
    }
    if (hook) {
        if (options.functional) {
            // register for functional component in vue file
            const originalRender = options.render;
            options.render = function renderWithStyleInjection(h, context) {
                hook.call(context);
                return originalRender(h, context);
            };
        }
        else {
            // inject component registration as beforeCreate hook
            const existing = options.beforeCreate;
            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
    }
    return script;
}

/* script */
const __vue_script__ = script;

/* template */
var __vue_render__ = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-snackbar',{staticClass:"application",attrs:{"timeout":_vm.timeout,"color":_vm.color},on:{"click":_vm.dismiss},model:{value:(_vm.active),callback:function ($$v) {_vm.active=$$v;},expression:"active"}},[(_vm.icon.length > 0)?_c('v-icon',{attrs:{"dark":"","left":""}},[_vm._v("\n    "+_vm._s(_vm.icon)+"\n  ")]):_vm._e(),_vm._v("\n\n  "+_vm._s(_vm.text)+"\n\n")],1)};
var __vue_staticRenderFns__ = [];

  /* style */
  const __vue_inject_styles__ = undefined;
  /* scoped */
  const __vue_scope_id__ = undefined;
  /* module identifier */
  const __vue_module_identifier__ = undefined;
  /* functional template */
  const __vue_is_functional_template__ = false;
  /* style inject */
  
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__ = /*#__PURE__*/normalizeComponent(
    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
    __vue_inject_styles__,
    __vue_script__,
    __vue_scope_id__,
    __vue_is_functional_template__,
    __vue_module_identifier__,
    false,
    undefined,
    undefined,
    undefined
  );

var colors = ['success', 'info', 'error'];
var defaultOptions = {
  text: '',
  icon: '',
  color: 'info',
  timeout: 3000,
  dismissible: true
};
var toastCmp = null;

function createToastCmp() {
  var cmp = new Vue(__vue_component__);
  document.body.appendChild(cmp.$mount().$el);
  return cmp;
}

function getToastCmp() {
  if (!toastCmp) {
    toastCmp = createToastCmp();
  }

  return toastCmp;
}

function show() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  getToastCmp().show(Object.assign({}, defaultOptions, options));
}

function close() {
  getToastCmp().close();
}

function createShorthands() {
  var shorthands = {};
  colors.forEach(function (color) {
    return shorthands[color] = function (text) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return show(Object.assign({
        color: color,
        text: text
      }, options));
    };
  });
  return shorthands;
}

var index = Object.assign({
  show: show,
  close: close,
  getToastCmp: getToastCmp,
  defaultOptions: defaultOptions
}, createShorthands());

module.exports = index;
